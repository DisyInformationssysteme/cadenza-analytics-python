name: Release

on:
  workflow_dispatch:
    inputs:
      deployment-env:                        
        type: choice                         
        description: 'Deployment environment'
        required: true                       
        options:                             
          - test.pypi.org                    
          - pypi.org                         
        default: 'test.pypi.org'             
                                             
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing to pypi.org and test.pypi.org
      contents: write  # needed for the softprops/action-gh-release GitHub release step

    steps:

    - uses: actions/create-github-app-token@v1
      id: app-token
      with:
        app-id: ${{ vars.DISY_RELEASE_APP_ID }}
        private-key: ${{ secrets.DISY_RELEASE_APP_SECRET }}

    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ steps.app-token.outputs.token }}


    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: ${{ vars.PYTHON_VERSION }}

    # poetry is needed for building and for poetry-bumpversion for version management
    - name: Install poetry
      run: |
        pipx install poetry
        poetry self add poetry-bumpversion

    # install dependencies early in case there are problems, do not build yet, or we will have a dist with wrong version
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install .

    # Needed for creating the tag
    - name: Configure Git
      run: |
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"

    - name: Prepare package version (e.g. 1.2.3-dev => 1.2.3) DRY-RUN FOR TESTING (!)
      if: "${{ github.event.inputs.deployment-env == 'test.pypi.org' }}"
      run: |
        echo "RELEASE_VERSION=$(poetry version patch --dry-run -s | head -n 1)" >> $GITHUB_ENV

    - name: Prepare package version (e.g. 1.2.3-dev => 1.2.3)
      if: "${{ github.event.inputs.deployment-env == 'pypi.org' }}"
      run: |
        echo "RELEASE_VERSION=$(poetry version patch -s | head -n 1)" >> $GITHUB_ENV

    # TODO should this only be done on the main branch? Or how? Is this env var even used?
    - name: Set release tag to 'latest'    
      run: |
        echo "RELEASE_TAG=latest" >> $GITHUB_ENV

    # Create a dist/wheel for the bumped version now after "poetry version" has run
    - name: Build
      run: |
        poetry build

    # either push to test.pypi.org or pypi.org depending on user input
    - name: Publish package distributions to Test (!) PyPI
      if: "${{ github.event.inputs.deployment-env == 'test.pypi.org' }}"
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/

    - name: Publish package distributions to PyPI
      if: "${{ github.event.inputs.deployment-env == 'pypi.org' }}"
      uses: pypa/gh-action-pypi-publish@release/v1

    - name: Update changelog
      uses: superfaceai/release-changelog-action@v2
      with:
        path-to-changelog: CHANGELOG.md
        version: ${{ env.RELEASE_VERSION }}
        operation: release

    - name: Commit and tag changes (push happens later)
      run: |
        git add "pyproject.toml"
        git add "CHANGELOG.md"
        git commit -m "Chore: release ${{ env.RELEASE_VERSION }}"
        git tag ${{ env.RELEASE_VERSION }}

    # TODO why push here already? Should suffice to push in the very end?
    # only push changes if not a test release    
    - name: Push changes
      if: "${{ github.event.inputs.deployment-env == 'pypi.org' }}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: git push origin && git push --tags

    - id: get-changelog
      name: Get version changelog
      uses: superfaceai/release-changelog-action@v2
      with:
        path-to-changelog: CHANGELOG.md
        version: ${{ env.RELEASE_VERSION }}
        operation: read

    - name: Update GitHub release documentation
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.RELEASE_VERSION }}
        body: ${{ steps.get-changelog.outputs.changelog }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Bump package version to new dev version (e.g. 1.2.3 => 1.2.4-dev)
      run: |
        poetry version --dry-run "$(poetry version patch -s | head -n 1)-dev"
        DEV_VERSION=$(poetry version -s) && echo "DEV_VERSION=$DEV_VERSION" >> $GITHUB_ENV # Determine DEV_VERSION 

    - name: Commit version bump (push happens later)
      run: |
        git add "pyproject.toml"
        git commit -m "Chore: bump up version to ${{ env.DEV_VERSION }}"
    
    # only push changes if not a test release    
    - name: Push changes
      if: "${{ github.event.inputs.deployment-env == 'pypi.org' }}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: git push origin

